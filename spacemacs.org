#+TITLE: Spacemacs Tangled Configuration
#+STARTUP: headlines
#+STARTUP: nohideblocks
#+STARTUP: noindent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link

* Introduction
This is a tangled user-init, layers, and user-config file for spacemacs. For changes to the =spacemacs/init= function, please use the =spacemacs-init.el= file which contains a listing of all
known variables for said function. Currently, the =spacemacs-init.el= file tracks the develop
branch of spacemacs, but this can be changed by copy-pasting the contents of the =setq-default= 
s-expression from =spacemacs/init= into the file.

** spacemacs.org 
To add configuration options before Spacemacs loads, insert the following kind
of src block in your spacemacs.org file

#+BEGIN_SRC emacs-lisp :tangle user-init.el
#+END_SRC

Configuration of layers can be inserted using the following kind of src block in your spacemacs.org file

#+BEGIN_SRC emacs-lisp :tangle layers.el
#+END_SRC

Alternatively, if the block should be loaded after Spacemacs loads, insert the
following test block

#+BEGIN_SRC emacs-lisp :tangle user-config.el
#+END_SRC

* Helper Functions

** Yasnippet creation

To help with creation of your text blocks, there are two snippets defined in the
local snippet directory =~/.spacemacs.d/snippets/org-mode/= folder.

To tangle to the =user-spacemacs-int= file, type =usi=, =user-init= file, type =ui=, =layers= file, type =lyrs=, alternatively =uc= to tangle the =user-config= file.

** Find this file
   Create binding to spacemacs.org file

#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun spacemacs.org/find-spacemacs-org-file ()
    (interactive)
    (find-file (concat dotspacemacs-directory "spacemacs.org")))

  (spacemacs/set-leader-keys "feo" 'spacemacs.org/find-spacemacs-org-file)
#+END_SRC

** Find spacemacs-init file
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (defun spacemacs.org/find-spacemacs-init-file ()
    (interactive)
    (find-file (concat dotspacemacs-directory "spacemacs-init.el")))

  (spacemacs/set-leader-keys "fei" 'spacemacs.org/find-spacemacs-init-file)
#+END_SRC

* Spacemacs Init Configuration

Most of the Spacemacs Init Configuration is in it's own file =spacemacs-init.el=. We can override the defaults, by moving their variable declarations to this document in a =user-spacemacs-init.el= 
src block. Variables set in this document will override those set in the default file.

#+BEGIN_SRC emacs-lisp :tangle user-spacemacs-init.el
  (setq-default
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'vim)


#+END_SRC

* Layer Configuration

** Distribution
The Base distribution to use. This is a layer contained in the directory `+distribution'. For now available distributions are `spacemacs-base' or `spacemacs'. (default 'spacemacs)

#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
   dotspacemacs-distribution 'spacemacs)
#+END_SRC

** Lazy Layer Installation
Lazy installation of layers (i.e. layers are installed only when a file with a supported type is opened). Possible values are `all', `unused' and `nil'. `unused' will lazy 
install only unused layers (i.e. layers not listed in variable `dotspacemacs-configuration-layers'), `all' will lazy install any layer that support lazy installation even the layers
listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy installation feature and you have to explicitly list a layer in the variable `dotspacemacs-configuration-layers' to install it.
(default 'unused)
#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
     dotspacemacs-enable-lazy-installation 'unused)
#+END_SRC

*** Lazy Layer Installation Confirmation

If non-nil then Spacemacs will ask for confirmation before installing a layer lazily. 
(default t)
#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
   dotspacemacs-ask-for-lazy-installation t)
#+END_SRC

** Configuration Layers

*** Layer Paths

List of additional paths where to look for configuration layers. Paths must have a trailing slash (i.e. `~/.mycontribs/')

#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
   dotspacemacs-configuration-layer-path '())
#+END_SRC

*** Layers

List of configuration layers to load.

#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
   dotspacemacs-configuration-layers
     '(
       ;; ----------------------------------------------------------------
       ;; Example of useful layers you may want to use right away.
       ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
       ;; `M-m f e R' (Emacs style) to install them.
       ;; ----------------------------------------------------------------
       auto-completion
       ;; better-defaults
       emacs-lisp
       racket
       ;; git
       helm
       ;; lsp
       ;; markdown
       multiple-cursors
       ;; org
       ;; (shell :variables
       ;;        shell-default-height 30
       ;;        shell-default-position 'bottom)
       ;; spell-checking
       ;; syntax-checking
       treemacs
       ;; version-control
       ))
#+END_SRC

*** Packages

**** Additional Packages

List of additional packages that will be installed without being wrapped in a layer. If you need some configuration for these packages, then consider creating a layer. You can also put the
configuration in `dotspacemacs/user-config'. To use a local version of a package, use the `:location' property: ='(your-package :location "~/path/to/your-package/")= 
Also include the dependencies as they will not be resolved automatically.

#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
   dotspacemacs-additional-packages '(
                                      (ob-racket :location
                                                 (recipe :fetcher github :repo "DEADB17/ob-racket"))))
#+END_SRC

**** Frozen Packages

A list of packages that cannot be updated.

#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
   dotspacemacs-frozen-packages '())
#+END_SRC

**** Excluded Packages

A list of packages that will not be installed and loaded.

#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
   dotspacemacs-excluded-packages '())
#+END_SRC

**** Package Installation

Defines the behaviour of Spacemacs when installing packages. Possible values are `used-only', `used-but-keep-unused' and `all'. `used-only' installs only explicitly used packages and deletes any unused
packages as well as their unused dependencies. `used-but-keep-unused' installs only the used packages but won't delete unused ones. `all' installs *all* packages supported by Spacemacs and never 
uninstalls them. 
(default is `used-only')

#+BEGIN_SRC emacs-lisp :tangle layers.el
  (setq-default
   dotspacemacs-install-packages 'used-only)
#+END_SRC
* Racket Language Literate Programming
Use =org= mode and =babel= to perform literate programming in babel.
#+BEGIN_SRC emacs-lisp :tangle user-config.el
  (use-package ob-racket
    :after org
    :pin manual
    :config
    (append '((racket . t) (scribble . t)) org-babel-load-languages))
#+END_SRC


